from docplex.cp.model import CpoModel  
import time  
import sys  

def SolveScheduling(N, M, d, c, conflicts):
    mdl = CpoModel(name="ExamScheduling")  
    MaxSlot = N  
    Slot = [mdl.integer_var(1, MaxSlot, f"Slot{i}") for i in range(N)]  
    Room = [mdl.integer_var(1, M, f"Room{i}") for i in range(N)]  
    D = mdl.integer_var(1, MaxSlot, "D")  
# 2 classes have conflicts can not have same slot :
    for i, j in conflicts:
        mdl.add(Slot[i] != Slot[j])
# Capacity of chosen room must >= number of students of class i :
    for i in range(N):
        for r in range(1, M+1):  
            if d[i] > c[r-1]:
                mdl.add(Room[i] != r)
# 2 classes can not have same room and same slot :
    for i in range(N):
        for j in range(i+1, N):
            mdl.add((Slot[i] != Slot[j]) | (Room[i] != Room[j]))

    for i in range(N):
        mdl.add(Slot[i] <= D)
    # objective :
    mdl.minimize(D)

    start = time.perf_counter()  
    sol = mdl.solve()  
    end = time.perf_counter() 
    print(f"Thời gian thực hiện (CPLEX CP): {end-start:.8f} giây")

    if sol is None:  
        return None, None
    slots = [int(sol.get_value(Slot[i])) for i in range(N)]  
    rooms = [int(sol.get_value(Room[i])) for i in range(N)]  
    return slots, rooms  

if __name__ == "__main__":
    data = sys.stdin.read().split()  
    it = iter(data)
    N = int(next(it)); M = int(next(it)) 
    d = [int(next(it)) for _ in range(N)]  
    c_vals = [int(next(it)) for _ in range(M)]  
    K = int(next(it))  
    conflicts = []  
    for _ in range(K):
        u = int(next(it)) - 1  
        v = int(next(it)) - 1
        conflicts.append((u, v))  
    slots, rooms = SolveScheduling(N, M, d, c_vals, conflicts)  
    if slots:  
        for i in range(N):  
            print(i+1, slots[i], rooms[i])  
    else:
        print("No solution found")  
