//C 
#include <stdio.h>
#include <limits.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include <string.h> 

#define Max_N      10001
#define Max_M      10001
#define time_slot  Max_N
#define Max_K      1001
#define Max_Bee    201
#define Max_iter   100
#define Max_trial  20

int N, M, K;
int d[Max_N];                  
int c[Max_M];                  
bool Conflict[Max_N][Max_N];   
int SolRoom[Max_N];            
int SolSlot[Max_N];            
int Trial[Max_Bee];           
double bestfit = 0;
int best_slot[Max_N];
int best_room[Max_N];
double Prob[Max_Bee];          
double Fitness[Max_Bee];


int BeeSlot[Max_Bee][Max_N];   
int BeeRoom[Max_Bee][Max_N];


int Penalty(int SolSlot[], int SolRoom[]) {
    int pen = 0;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j < i; j++) {
            if (Conflict[i][j]) {
                if (SolSlot[i] == SolSlot[j]) pen++;
            }
            else if (SolSlot[i] == SolSlot[j] && SolRoom[i] == SolRoom[j]) {
                pen++;
            }
        }
    }
    for (int i = 1; i <= N; i++) {
        if (c[SolRoom[i]] < d[i]) pen++;
    }
    return pen;  
}


void Input() {
    scanf("%d %d", &N, &M);
    for (int i = 1; i <= N; i++) {
        scanf("%d", &d[i]);
    }
    for (int j = 1; j <= M; j++) {
        scanf("%d", &c[j]);
    }
    
    
    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= N; j++)
            Conflict[i][j] = false;

    scanf("%d", &K);
    for (int k = 1, u, v; k <= K; k++) {
        scanf("%d %d", &u, &v);
        Conflict[u][v] = Conflict[v][u] = true;
    }
}


void InitColony() {
    int maxSlots = N;
    for (int bee = 0; bee < Max_Bee; bee++) {
       for (int i = 1; i <= N; i++) {
           BeeSlot[bee][i] = 1 + rand() % maxSlots;  
           BeeRoom[bee][i] = 1 + rand() % M;         
       }
    }
}


void ComputeFitness() {
    for (int bee = 0; bee < Max_Bee; bee++) {
        int pen = Penalty(BeeSlot[bee], BeeRoom[bee]);
        double fit = 1.0 / (1.0 + pen);
        Fitness[bee] = fit;
        if (fit > bestfit) {
            bestfit = fit;
            
            for (int i = 1; i <= N; i++) {
                best_slot[i] = BeeSlot[bee][i];
                best_room[i] = BeeRoom[bee][i];
            }
        }
    }
}


void EmployedBees() {
    for (int bee = 0; bee < Max_Bee; bee++) {
        
        int tmpSlot[Max_N], tmpRoom[Max_N];
        memcpy(tmpSlot, BeeSlot[bee], sizeof(tmpSlot));
        memcpy(tmpRoom, BeeRoom[bee], sizeof(tmpRoom));
        
        
        int i = 1 + rand() % N;
        if (rand() % 2 == 0) {
            tmpSlot[i] = 1 + rand() % N;
        }
        else {
            tmpRoom[i] = 1 + rand() % M;
        }
        
        
        int NewPen = Penalty(tmpSlot, tmpRoom);
        int OldPen = Penalty(BeeSlot[bee], BeeRoom[bee]);
        
        if (NewPen < OldPen) {
            memcpy(BeeSlot[bee], tmpSlot, sizeof(tmpSlot));
            memcpy(BeeRoom[bee], tmpRoom, sizeof(tmpRoom));
            Trial[bee] = 0;
        }
        else {
            Trial[bee]++;
        }
    }
}


void OnlookerBees() {
    
    double sumF = 0;
    for (int bee = 0; bee < Max_Bee; bee++) 
        sumF += Fitness[bee];
    
    
    for (int bee = 0; bee < Max_Bee; bee++)
        Prob[bee] = Fitness[bee] / sumF;

    int count = 0, idx = 0;
    while (count < Max_Bee) {
        if ((double)rand() / RAND_MAX < Prob[idx]) {
            
            int tmpSlot[Max_N], tmpRoom[Max_N];
            memcpy(tmpSlot, BeeSlot[idx], sizeof(tmpSlot));
            memcpy(tmpRoom, BeeRoom[idx], sizeof(tmpRoom));
            
            
            int i = 1 + rand() % N;
            if (rand() % 2 == 0) {
                tmpSlot[i] = 1 + rand() % N;
            }
            else {
                tmpRoom[i] = 1 + rand() % M;
            }
            
            
            int NewPen = Penalty(tmpSlot, tmpRoom);
            int OldPen = Penalty(BeeSlot[idx], BeeRoom[idx]);
            
            if (NewPen < OldPen) {
                memcpy(BeeSlot[idx], tmpSlot, sizeof(tmpSlot));
                memcpy(BeeRoom[idx], tmpRoom, sizeof(tmpRoom));
                Trial[idx] = 0;
            }
            else {
                Trial[idx]++;
            }
            
            count++;
        }
        idx = (idx + 1) % Max_Bee;
    }
}


void ScoutBees() {
    for (int bee = 0; bee < Max_Bee; bee++) {
        if (Trial[bee] > Max_trial) {
            for (int i = 1; i <= N; i++) {
                BeeSlot[bee][i] = 1 + rand() % N;
                BeeRoom[bee][i] = 1 + rand() % M;
            }
            Trial[bee] = 0;
        }
    }
}


void ABC() {
    InitColony();
    for (int bee = 0; bee < Max_Bee; bee++) 
        Trial[bee] = 0;
    
    ComputeFitness();

    
    for (int iter = 0; iter < Max_iter; iter++) {
        EmployedBees();
        ComputeFitness();
        OnlookerBees();
        ComputeFitness();
        ScoutBees();
        ComputeFitness();
    }

    
    int bestBee = 0;
    for (int bee = 1; bee < Max_Bee; bee++) {
        if (Fitness[bee] > Fitness[bestBee]) 
            bestBee = bee;
    }
    
    
    memcpy(SolSlot + 1, BeeSlot[bestBee] + 1, N * sizeof(int));
    memcpy(SolRoom + 1, BeeRoom[bestBee] + 1, N * sizeof(int));
}

int main() {
    Input();
    srand((unsigned)time(NULL));
    ABC();
    for (int i = 1; i <= N; i++) {
        printf("%d %d %d\n", i, SolSlot[i], SolRoom[i]);
    }
    return 0;
}
